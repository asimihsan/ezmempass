/*

protobuf setup

```
brew install protobuf swift-protobuf
flutter pub global activate protoc_plugin

# Add $HOME/flutter/.pub-cache/bin to $PATH, add to ~/.zshrc
export PATH="$PATH":"$HOME/flutter/.pub-cache/bin"

# Also add in the dart executable, add to ~/.zshrc
export PATH="$PATH":"$HOME/flutter/bin/cache/dart-sdk/bin"
```

*/

apply plugin: 'base'

clean {
    delete file("rust/target")
    delete file("build")
    delete file("flutter_app/build")
    delete file("flutter_app/ios/Runner/passwordgenffi.h")
    delete file("flutter_app/ios/Flutter/libpasswordgenffi.a")
    delete file("flutter_app/lib/gen")
    delete file("flutter_app/ios/.symlinks")
    delete file("flutter_app/ios/build")
    delete file("flutter_app/.packages")
    delete file("flutter_app/.flutter-plugins")
    doLast {
        ant.mkdir(dir: "rust/target")
        ant.touch(file: "rust/target/.do-not-backup-directory")
        ant.mkdir(dir: "flutter_app/build")
        ant.touch(file: "flutter_app/build/.do-not-backup-directory")
        ant.mkdir(dir: "flutter_app/ios/build")
        ant.touch(file: "flutter_app/ios/build/.do-not-backup-directory")
        ant.mkdir(dir: "build")
        ant.touch(file: "build/.do-not-backup-directory")
    }
}

def rustInputFileTree = fileTree("rust") {
    include("**/*.rs")
    include("**/*.toml")
    include("**/*.txt")
    include("Cargo.lock")
    include("Cargo.toml")
    exclude("target")
}

def flutterInputFileTree = fileTree("flutter_app") {
    exclude("build")
    exclude("*.iml")
    exclude(".packages")
    exclude(".flutter-plugins")
    exclude("ios/.symlinks")
}

task rustBuild(type: Exec) {
    inputs.files(rustInputFileTree.getFiles())
    outputs.dir file("rust/target/debug")
    workingDir 'rust'
    commandLine 'cargo', 'test'
}

task rustGenerateHeader(type: Exec) {
    dependsOn(rustBuild)
    inputs.files(rustInputFileTree.getFiles())
    outputs.files(
        file("build/passwordgenffi.h")
    )
    workingDir 'rust/lib/passwordgenffi'
    commandLine 'bash', '-c', 'cbindgen --lang c > ../../../build/passwordgenffi.h'
}

task rustGenerateIosLibrary(type: Exec) {
    dependsOn(rustBuild)
    inputs.files(rustInputFileTree.getFiles())
    outputs.files(
        file("rust/target/universal/release/libpasswordgenffi.a")
    )
    workingDir 'rust'
    commandLine 'cargo', 'lipo', '--release'
}

task rustCopyIosLibraryToBuild(type: Copy) {
    dependsOn(rustGenerateIosLibrary)
    inputs.files(rustInputFileTree.getFiles())
    from "rust/target/universal/release/libpasswordgenffi.a"
    into "build"
}

task rustIosBuild {
    dependsOn(rustCopyIosLibraryToBuild, rustGenerateHeader)
    inputs.files(rustInputFileTree.getFiles())
}

task iosCopyRustHeader(type: Copy) {
    dependsOn(rustIosBuild)
    inputs.files(rustInputFileTree.getFiles())
    from "build/passwordgenffi.h"
    into "flutter_app/ios/Runner"
}

task iosCopyRustLibrary(type: Copy) {
    dependsOn(rustIosBuild)
    inputs.files(rustInputFileTree.getFiles())
    from "build/libpasswordgenffi.a"
    into "flutter_app/ios/Flutter"
}

task rustIosCopy {
    dependsOn(iosCopyRustLibrary, iosCopyRustHeader)
    inputs.files(rustInputFileTree.getFiles())
}

task rustAndroidAarch64Build(type: Exec) {
    dependsOn(rustBuild)
    inputs.files(rustInputFileTree.getFiles())
    outputs.dir file("rust/target/aarch64-linux-android/release")
    workingDir 'rust'
    commandLine 'cargo', 'ndk', '--target', 'aarch64-linux-android',
                '--android-platform', '22', '--', 'build', '--release'
}

task rustAndroidArmv7Build(type: Exec) {
    dependsOn(rustBuild)
    inputs.files(rustInputFileTree.getFiles())
    outputs.dir file("rust/target/armv7-linux-androideabi/release")
    workingDir 'rust'
    commandLine 'cargo', 'ndk', '--target', 'armv7-linux-androideabi',
                '--android-platform', '22', '--', 'build', '--release'
}

task rustAndroidi686Build(type: Exec) {
    dependsOn(rustBuild)
    inputs.files(rustInputFileTree.getFiles())
    outputs.dir file("rust/target/i686-linux-android/release")
    workingDir 'rust'
    commandLine 'cargo', 'ndk', '--target', 'i686-linux-android',
                '--android-platform', '22', '--', 'build', '--release'
}

task rustAndroidx8664Build(type: Exec) {
    dependsOn(rustBuild)
    inputs.files(rustInputFileTree.getFiles())
    outputs.dir file("rust/target/x86_64-linux-android/release")
    workingDir 'rust'
    commandLine 'cargo', 'ndk', '--target', 'x86_64-linux-android',
                '--android-platform', '22', '--', 'build', '--release'
}


task rustAndroidBuild {
    dependsOn(rustAndroidAarch64Build,
              rustAndroidArmv7Build,
              rustAndroidi686Build,
              rustAndroidx8664Build)
    inputs.files(rustInputFileTree.getFiles())
}

task flutterProtobufPreferences(type: Exec) {
    inputs.dir(
        file("flutter_app/protos/")
    )    
    outputs.dir(
        file("flutter_app/lib/gen/")
    )
    workingDir 'flutter_app'
    commandLine 'protoc', '--dart_out', './lib/gen', './protos/preferences.proto'
}

task flutterPubGet(type: Exec) {
    inputs.files(flutterInputFileTree.getFiles())
    outputs.files(
        file("flutter_app/.packages"),
        file("flutter_app/.flutter-plugins")
    )
    workingDir 'flutter_app'
    commandLine 'flutter', 'pub', 'get'
}

task flutterBuildIos(type: Exec) {
    dependsOn(
        flutterPubGet,
        flutterProtobufPreferences,
        rustIosCopy,
        //rustAndroidBuild,
    )
    inputs.files(flutterInputFileTree.getFiles())
    outputs.dir file("flutter_app/build/ios/iphoneos")
    workingDir 'flutter_app'
    commandLine 'flutter', 'build', 'ios'
}

task flutterBuild {
    dependsOn(
        flutterBuildIos,
    )
}

task all {
    dependsOn(
        flutterBuild
    )
}

task backup(type: Zip) {
    dependsOn(clean)

    archiveFileName = "ezmempass.zip"
    destinationDirectory = file("../")

    from('.') {
        include '**/*'
        include '.git/**/*'
    }
    zip64 true
    reproducibleFileOrder true
}

task ensureIosSimulatorRunning(type: Exec) {
    workingDir 'flutter_app'
    commandLine 'open', '-a', 'Simulator', '-g'
}

task iosIntegrationTest(type: Exec) {
    dependsOn(ensureIosSimulatorRunning, flutterBuildIos)
    workingDir 'flutter_app'
    commandLine 'flutter', 'drive', '--no-build', '--target', 'test_driver/main.dart'
}