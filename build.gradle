/*

protobuf setup

```
brew install protobuf swift-protobuf
flutter pub global activate protoc_plugin

# Add $HOME/flutter/.pub-cache/bin to $PATH, add to ~/.zshrc
export PATH="$PATH":"$HOME/flutter/.pub-cache/bin"

# Also add in the dart executable, add to ~/.zshrc
export PATH="$PATH":"$HOME/flutter/bin/cache/dart-sdk/bin"
```

*/

/* TODO
-   Why can I only get Android builds of Rust working for SDK 23? find_symbols.sh says pthread_atfork() present for
    older SDKs.
-   Can I get ARM 32-bit working for Rust on iOS builds?

*/

import org.apache.tools.ant.taskdefs.condition.Os

apply plugin: 'base'

private static Iterable<String> osAdaptiveCommand(String... commands) {
    // Reference: https://stackoverflow.com/questions/27406054/how-do-you-support-a-gradle-exec-task-for-both-mac-and-pc
    def newCommands = []
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        newCommands = ['cmd', '/c']
    }

    newCommands.addAll(commands)
    return newCommands
}

clean {
    delete file("rust/target")
    delete file("build")
    delete file("flutter_app/build")
    delete file("flutter_app/ios/Runner/passwordgenffi.h")
    delete file("flutter_app/ios/Flutter/libpasswordgenffi.a")
    delete file("flutter_app/android/app/src/main/jniLibs")
    delete file("flutter_app/lib/gen")
    delete file("flutter_app/ios/.symlinks")
    delete file("flutter_app/ios/build")
    delete file("flutter_app/.packages")
    delete file("flutter_app/.flutter-plugins")
    doLast {
        ant.mkdir(dir: "rust/target")
        ant.touch(file: "rust/target/.do-not-backup-directory")
        ant.mkdir(dir: "flutter_app/build")
        ant.touch(file: "flutter_app/build/.do-not-backup-directory")
        ant.mkdir(dir: "flutter_app/ios/build")
        ant.touch(file: "flutter_app/ios/build/.do-not-backup-directory")
        ant.mkdir(dir: "build")
        ant.touch(file: "build/.do-not-backup-directory")
        ant.mkdir(dir: "flutter_app/android/app/src/main/jniLibs")
        ant.touch(file: "flutter_app/android/app/src/main/jniLibs/.do-not-backup-directory")
    }
}

def rustInputFileTree = fileTree("rust") {
    include("**/*.rs")
    include("**/*.toml")
    include("**/*.txt")
    include("Cargo.lock")
    include("Cargo.toml")
    exclude("target")
}

def flutterInputFileTree = fileTree("flutter_app") {
    exclude("build")
    exclude("*.iml")
    exclude(".packages")
    exclude(".flutter-plugins")
    exclude(".flutter-plugins-dependencies")
    exclude("pubspec.lock")
    exclude("ios/.symlinks")
}

task rustBuild(type: Exec) {
    inputs.files(rustInputFileTree.getFiles())
    outputs.dir file("rust/target/debug")
    workingDir 'rust'
    commandLine osAdaptiveCommand('cargo', 'test')
}

task rustGenerateHeader(type: Exec) {
    dependsOn(rustBuild)
    inputs.files(rustInputFileTree.getFiles())
    outputs.files(
        file("build/passwordgenffi.h")
    )
    workingDir 'rust/lib/passwordgenffi'
    commandLine osAdaptiveCommand('bash', '-c', 'cbindgen --lang c > ../../../build/passwordgenffi.h')
}

task rustGenerateIosLibrary(type: Exec) {
    dependsOn(rustBuild)
    inputs.files(rustInputFileTree.getFiles())
    outputs.files(
        file("rust/target/universal/release/libpasswordgenffi.a")
    )
    workingDir 'rust'
    commandLine osAdaptiveCommand('cargo', 'lipo', '--release')
}

task rustGenerateAndroidAarch64(type: Exec) {
    dependsOn(rustBuild)
    inputs.files(rustInputFileTree.getFiles())
    outputs.files(
        file("rust/target/aarch64-linux-android/release/libpasswordgenffi.so")
    )
    workingDir 'rust'
    commandLine osAdaptiveCommand('cargo', 'ndk',
        '--target', 'aarch64-linux-android',
        '--android-platform', "23", 
        '--',
        'build', '--release')
}

task rustGenerateAndroidArm(type: Exec) {
    dependsOn(rustBuild)
    inputs.files(rustInputFileTree.getFiles())
    outputs.files(
        file("rust/target/armv7-linux-androideabi/release/libpasswordgenffi.so")
    )
    workingDir 'rust'
    commandLine osAdaptiveCommand('cargo', 'ndk',
        '--target', 'armv7-linux-androideabi',
        '--android-platform', "23", 
        '--',
        'build', '--release')
}

task rustGenerateAndroidi686(type: Exec) {
    dependsOn(rustBuild)
    inputs.files(rustInputFileTree.getFiles())
    outputs.files(
        file("rust/target/i686-linux-android/release/libpasswordgenffi.so")
    )
    workingDir 'rust'
    commandLine osAdaptiveCommand('cargo', 'ndk',
        '--target', 'i686-linux-android',
        '--android-platform', "23", 
        '--',
        'build', '--release')
}

task rustGenerateAndroidx8664(type: Exec) {
    dependsOn(rustBuild)
    inputs.files(rustInputFileTree.getFiles())
    outputs.files(
        file("rust/target/x86_64-linux-android/release/libpasswordgenffi.so")
    )
    workingDir 'rust'
    commandLine osAdaptiveCommand('cargo', 'ndk',
        '--target', 'x86_64-linux-android',
        '--android-platform', "23", 
        '--',
        'build', '--release')
}

task androidCopyAarch64(type: Copy) {
    dependsOn(rustGenerateAndroidAarch64)
    inputs.files(rustInputFileTree.getFiles())
    from "rust/target/aarch64-linux-android/release/libpasswordgenffi.so"
    into "flutter_app/android/app/src/main/jniLibs/arm64-v8a/"
}

task androidCopyArm(type: Copy) {
    dependsOn(rustGenerateAndroidArm)
    inputs.files(rustInputFileTree.getFiles())
    from "rust/target/armv7-linux-androideabi/release/libpasswordgenffi.so"
    into "flutter_app/android/app/src/main/jniLibs/armeabi-v7a/"
}

task androidCopyi686(type: Copy) {
    dependsOn(rustGenerateAndroidi686)
    inputs.files(rustInputFileTree.getFiles())
    from "rust/target/i686-linux-android/release/libpasswordgenffi.so"
    into "flutter_app/android/app/src/main/jniLibs/x86/"
}

task androidCopyx8664(type: Copy) {
    dependsOn(rustGenerateAndroidx8664)
    inputs.files(rustInputFileTree.getFiles())
    from "rust/target/x86_64-linux-android/release/libpasswordgenffi.so"
    into "flutter_app/android/app/src/main/jniLibs/x86_64/"
}

task rustCopyIosLibraryToBuild(type: Copy) {
    dependsOn(rustGenerateIosLibrary)
    inputs.files(rustInputFileTree.getFiles())
    from "rust/target/universal/release/libpasswordgenffi.a"
    into "build"
}

task rustIosBuild {
    dependsOn(rustCopyIosLibraryToBuild, rustGenerateHeader)
    inputs.files(rustInputFileTree.getFiles())
}

task iosCopyRustHeader(type: Copy) {
    dependsOn(rustIosBuild)
    inputs.files(rustInputFileTree.getFiles())
    from "build/passwordgenffi.h"
    into "flutter_app/ios/Runner"
}

task iosCopyRustLibrary(type: Copy) {
    dependsOn(rustIosBuild)
    inputs.files(rustInputFileTree.getFiles())
    from "build/libpasswordgenffi.a"
    into "flutter_app/ios/Flutter"
}

task rustIosCopy {
    dependsOn(iosCopyRustLibrary, iosCopyRustHeader)
    inputs.files(rustInputFileTree.getFiles())
}



task flutterProtobufPreferences(type: Exec) {
    inputs.dir(
        file("flutter_app/protos/")
    )    
    outputs.dir(
        file("flutter_app/lib/gen/")
    )
    workingDir 'flutter_app'
    commandLine osAdaptiveCommand('protoc', '--dart_out', './lib/gen', './protos/preferences.proto')
}

task flutterPubGet(type: Exec) {
    inputs.files(flutterInputFileTree.getFiles())
    outputs.files(
        file("flutter_app/.packages"),
        file("flutter_app/.flutter-plugins")
    )
    workingDir 'flutter_app'
    commandLine osAdaptiveCommand('flutter', 'pub', 'get')
}

task flutterBuildIos(type: Exec) {
    dependsOn(
        flutterPubGet,
        flutterProtobufPreferences,
        rustIosCopy
    )
    inputs.files(flutterInputFileTree.getFiles())
    outputs.dir file("flutter_app/build/ios/iphoneos")
    workingDir 'flutter_app'
    commandLine osAdaptiveCommand('flutter', 'build', 'ios', '--no-pub')
}

task flutterBuildAndroidApks(type: Exec) {
    dependsOn(
        flutterPubGet,
        flutterProtobufPreferences,
        androidCopyAarch64,
        androidCopyArm,
        androidCopyi686,
        androidCopyx8664,
    )
    inputs.files(flutterInputFileTree.getFiles())
    outputs.dir file("flutter_app/build/app/outputs/apk")
    workingDir 'flutter_app'
    commandLine osAdaptiveCommand('flutter', 'build', 'apk',
        '--debug',
        '--target-platform', 'android-arm64,android-arm,android-x86,android-x64',
        '--no-pub',
        '--split-per-abi')
}

task flutterBuild {
    dependsOn(
        flutterBuildIos,
        flutterBuildAndroidApks
    )
}

task runAndroid(type: Exec) {
    dependsOn(flutterBuildAndroidApks)
    workingDir 'flutter_app'
    if (project.hasProperty('emulatorId')) {
        commandLine osAdaptiveCommand('flutter', 'run', '-d', emulatorId, '--no-hot')
    }
}

task all {
    dependsOn(
        flutterBuild
    )
}

task backup(type: Zip) {
    dependsOn(clean)

    archiveFileName = "ezmempass.zip"
    destinationDirectory = file("../")

    from('.') {
        include '**/*'
        include '.git/**/*'
    }
    zip64 true
    reproducibleFileOrder true
}

task ensureIosSimulatorRunning(type: Exec) {
    workingDir 'flutter_app'
    commandLine osAdaptiveCommand('open', '-a', 'Simulator', '-g')
}

task iosIntegrationTest(type: Exec) {
    dependsOn(ensureIosSimulatorRunning, flutterBuildIos)
    workingDir 'flutter_app'
    commandLine osAdaptiveCommand('flutter', 'drive', '--no-pub', '--target', 'test_driver/main.dart', '-d', 'iph')
}

task androidIntegrationTest(type: Exec) {
    dependsOn(flutterBuildAndroidApks)
    workingDir 'flutter_app'
    if (project.hasProperty('emulatorId')) {
        commandLine osAdaptiveCommand('flutter', 'drive', '--no-pub', '--target', 'test_driver/main.dart', '-d', emulatorId)
    }
}
