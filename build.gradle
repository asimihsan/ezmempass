apply plugin: 'base'

clean {
    delete file("rust/target")
    delete file("build")
    delete file("flutter_app/ios/Runner/passwordgenffi.h")
    delete file("flutter_app/ios/Flutter/libpasswordgenffi.a")
}

task rustBuild(type: Exec) {
    def inputFileTree = fileTree("rust") {
        include("**/*.rs")
        include("**/*.toml")
        include("**/*.txt")
        include("Cargo.lock")
        include("Cargo.toml")
        exclude("target")
    }
    inputs.files(inputFileTree.getFiles())
    outputs.dir file("rust/target/debug")
    workingDir 'rust'
    commandLine 'cargo', 'test'
}

task rustGenerateHeader(type: Exec) {
    dependsOn(rustBuild)
    def inputFileTree = fileTree("rust") {
        include("rust/lib/passwordgenffi/**/*")
    }
    outputs.files(
        file("build/passwordgenffi.h")
    )
    workingDir 'rust/lib/passwordgenffi'
    commandLine 'bash', '-c', 'cbindgen --lang c > ../../../build/passwordgenffi.h'
}

task rustGenerateIosLibrary(type: Exec) {
    dependsOn(rustBuild)
    def inputFileTree = fileTree("rust") {
        include("**/*.rs")
        include("**/*.toml")
        include("**/*.txt")
        include("Cargo.lock")
        include("Cargo.toml")
        exclude("target")
    }
    inputs.files(inputFileTree.getFiles())
    outputs.files(
        file("rust/target/universal/release/libpasswordgenffi.a")
    )
    workingDir 'rust'
    commandLine 'cargo', 'lipo', '--release'
}

task rustCopyIosLibraryToBuild(type: Copy) {
    dependsOn(rustGenerateIosLibrary)
    from "rust/target/universal/release/libpasswordgenffi.a"
    into "build"
}

task rustIosBuild {
    dependsOn(rustCopyIosLibraryToBuild, rustGenerateHeader)
}

task iosCopyRustHeader(type: Copy) {
    dependsOn(rustIosBuild)
    from "build/passwordgenffi.h"
    into "flutter_app/ios/Runner"
}

task iosCopyRustLibrary(type: Copy) {
    dependsOn(rustIosBuild)
    from "build/libpasswordgenffi.a"
    into "flutter_app/ios/Flutter"
}

task rustIosCopy {
    dependsOn(iosCopyRustLibrary, iosCopyRustHeader)
}

task rustAndroidAarch64Build(type: Exec) {
    dependsOn(rustBuild)
    outputs.dir file("rust/target/aarch64-linux-android/release")
    workingDir 'rust'
    commandLine 'cargo', 'ndk', '--target', 'aarch64-linux-android',
                '--android-platform', '22', '--', 'build', '--release'
}

task rustAndroidArmv7Build(type: Exec) {
    dependsOn(rustBuild)
    outputs.dir file("rust/target/armv7-linux-androideabi/release")
    workingDir 'rust'
    commandLine 'cargo', 'ndk', '--target', 'armv7-linux-androideabi',
                '--android-platform', '22', '--', 'build', '--release'
}

task rustAndroidi686Build(type: Exec) {
    dependsOn(rustBuild)
    outputs.dir file("rust/target/i686-linux-android/release")
    workingDir 'rust'
    commandLine 'cargo', 'ndk', '--target', 'i686-linux-android',
                '--android-platform', '22', '--', 'build', '--release'
}

task rustAndroidx8664Build(type: Exec) {
    dependsOn(rustBuild)
    outputs.dir file("rust/target/x86_64-linux-android/release")
    workingDir 'rust'
    commandLine 'cargo', 'ndk', '--target', 'x86_64-linux-android',
                '--android-platform', '22', '--', 'build', '--release'
}


task rustAndroidBuild {
    dependsOn(rustAndroidAarch64Build,
              rustAndroidArmv7Build,
              rustAndroidi686Build,
              rustAndroidx8664Build)
    def inputFileTree = fileTree("rust") {
        include("**/*.rs")
        include("**/*.toml")
        include("**/*.txt")
        include("Cargo.lock")
        include("Cargo.toml")
        exclude("target")
    }
    inputs.files(inputFileTree.getFiles())
}

task all {
    dependsOn(
        rustIosCopy,
        //rustAndroidBuild,
    )
}
